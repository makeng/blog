<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2022-03-20T20:55:50+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Makeng’s blog</title><subtitle>Slightly better than my notes</subtitle><author><name>Zhaokeng Ma</name><email>810768333@qq.com</email></author><entry><title type="html">我们应如何写好 Javascript</title><link href="http://localhost:4000/js/2022/03/20/about-js/" rel="alternate" type="text/html" title="我们应如何写好 Javascript" /><published>2022-03-20T00:00:00+08:00</published><updated>2022-03-20T00:00:00+08:00</updated><id>http://localhost:4000/js/2022/03/20/about-js</id><content type="html" xml:base="http://localhost:4000/js/2022/03/20/about-js/">&lt;h1 id=&quot;️-javascript&quot;&gt;▪️ Javascript&lt;/h1&gt;

&lt;p&gt;        此文件夹保存的是，JS 真正的、特有的（尽管多是抄过来的）特性和能力。只要这些根本的设计不变，那么它们之上的 API 就不会有太偏移的发展。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;👶 Splice&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;       与其说我爱Javascript，不如说我恨它。它是C语言和Self语言一夜情的产物。——Brendan Eich&lt;/p&gt;

&lt;p&gt;       十八世纪英国文学家约翰逊博士说得好：它的优秀之处并非原创，它的原创之处并不优秀。当今作为最庞大的用户数的语言，尽管有“绑架业界”的嫌疑，不要企图用 PHP、WebAssembly 去把它连根拔起。把它修补、扩充才是性价比最高的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;🙉 OOP + FP&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;        OO 的强大不需赘述了，它是模块化编程的基础。以前只能把函数通过 &lt;script&gt; 叠在一起，而 ESM 成熟的今天效率高了不少。&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;        函数式编程是面向数学的抽象，将计算描述为一种&lt;strong&gt;表达式求值&lt;/strong&gt;（参数进入表达式后得到返回值），其实，函数式程序就是一个表达式。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;函数是第一公民&lt;/li&gt;
  &lt;li&gt;函数应该是纯函数，没有副作用，其结果唯一&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;        第一点在语法上实现了，让函数能被赋值和加工（curry &amp;amp; compose）。第二点就落入了学术的范畴，在业务中难以施展。至于表达式，所有的编程语言都能做到。所以说，FP 是其思想这个说法有点牵强。&lt;/p&gt;

&lt;p&gt;Ref&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ruanyifeng.com/blog/2011/06/birth_of_javascript.html&quot;&gt;Javascript诞生记 - 阮一峰的网络日志&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/23569951&quot;&gt;JavaScript算是严格意义上的编程语言吗？ - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;-ninja&quot;&gt;🥷 Ninja&lt;/h1&gt;
&lt;p&gt;【5/14】&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;规划&lt;/th&gt;
      &lt;th&gt;Learning&lt;/th&gt;
      &lt;th&gt;Done&lt;/th&gt;
      &lt;th&gt;Used&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;【浏览器】&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;* DOM 操作&lt;br /&gt;* 事件&lt;br /&gt;* 技巧&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;* 平台与运用&lt;/td&gt;
      &lt;td&gt;* 页面构建与生命&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;【对象】&lt;br /&gt;&lt;br /&gt;* 对象-访问&lt;br /&gt;* 集合&lt;/td&gt;
      &lt;td&gt;* 对象-原型&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;【函数】&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;* 函数-参数和环境&lt;br /&gt;* 函数-闭包和作用域&lt;br /&gt;* 生成器和 Promise&lt;/td&gt;
      &lt;td&gt;* 函数-对象和参数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;【扩展】&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;* 正则&lt;br /&gt;* 模块化&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;-诞生&quot;&gt;🐣 诞生&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;背景：网景公司拥抱JAVA
    &lt;ul&gt;
      &lt;li&gt;平台
        &lt;ul&gt;
          &lt;li&gt;浏览器：C ++&lt;/li&gt;
          &lt;li&gt;服务器：（浏览器 V8 core）Nodejs&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;骨架、肉体与机能
        &lt;ul&gt;
          &lt;li&gt;HTML：标记语言（计算机科学家Tim Berners-Lee发明，描述文档结构，也算是计算机语言）&lt;/li&gt;
          &lt;li&gt;CSS：层叠样式表（同是万维网发明者1990年创造，经过4年后走出实验室）&lt;/li&gt;
          &lt;li&gt;JS：编程语言（图灵完备）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;作者：Brendan Eich 对 JAVA 没有兴趣，花了10天设计出来JS&lt;/li&gt;
  &lt;li&gt;结果：混合产物，函数式编程（作者专长） + 简化的面向对象（公司要求模仿JAVA），总和4种语言的特长
    &lt;ul&gt;
      &lt;li&gt;（1）借鉴 C 语言的基本语法；&lt;/li&gt;
      &lt;li&gt;（2）借鉴 Java 语言的数据类型和内存管理；&lt;/li&gt;
      &lt;li&gt;（3）借鉴 Scheme 语言，将函数提升到”第一等公民”（first class）的地位；&lt;/li&gt;
      &lt;li&gt;（4）借鉴 Self 语言，使用基于原型（prototype）的继承机制。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;未来
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;全领域&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;网页&lt;/li&gt;
      &lt;li&gt;后端&lt;/li&gt;
      &lt;li&gt;人工智能&lt;/li&gt;
      &lt;li&gt;物理引擎&lt;/li&gt;
      &lt;li&gt;网页游戏&lt;/li&gt;
      &lt;li&gt;AR、VR&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;全功能
    &lt;ul&gt;
      &lt;li&gt;安全（劫持）&lt;/li&gt;
      &lt;li&gt;多端适配&lt;/li&gt;
      &lt;li&gt;算法问题（比如最短路径）&lt;/li&gt;
      &lt;li&gt;抽象问题（投影仪模型）&lt;/li&gt;
      &lt;li&gt;数据可视化（需要数学与物理知识）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;优点&quot;&gt;优点&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;解释性语言
    &lt;ul&gt;
      &lt;li&gt;不需要先编译。直接输入到浏览器，就能逐行解释&lt;/li&gt;
      &lt;li&gt;弱类型。变量能直接改变类型&lt;/li&gt;
      &lt;li&gt;安全，不可以修改文件&lt;/li&gt;
      &lt;li&gt;作用域互借：灵活（调用对象方便）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;浏览器
    &lt;ul&gt;
      &lt;li&gt;多线程：复杂（注意渲染、网络请求等线程的等待问题，但是 JS 是单线程的）&lt;/li&gt;
      &lt;li&gt;事件驱动&lt;/li&gt;
      &lt;li&gt;跨平台，前后端兼吃&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;缺点&quot;&gt;缺点&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;弱类型：类型难判断，且容易互换&lt;/li&gt;
  &lt;li&gt;错误类型：null、NaN 等判断奇妙&lt;/li&gt;
  &lt;li&gt;不够完整&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;时间推移，小缺陷不常用不管，硬伤都有了补丁（ECMA）或者覆盖（TypeScript）。&lt;/p&gt;

&lt;h3 id=&quot;-10大缺陷&quot;&gt;🌙 10大缺陷&lt;/h3&gt;
&lt;p&gt;|🐚|说明|解决|
| —– | —– | —– |
|【命名空间】没有|函数和变量都可以覆盖|严格模式的引入|
|【标准库】比较小| |ES 补充|
|【null】几乎没有用|和对象奇妙的关系| |
|【NaN】的存在|超出解释器的极限，typeof NaN === ‘number’| Number.isNaN() |
|【全局变量】任意操作|所有文件均可写入|IIFE、CommonJS|
|【编码分号】自动插入| |IDE 可以处理掉|
|【加号】奇妙类型功能|数字 + 字符 = 「拼接」功能| |
|【数组】类型难以判断| |大量严格判断函数|
|【包装对象】混淆|方法生成对象，后面不注意会忘掉| |&lt;/p&gt;</content><author><name>Zhaokeng Ma</name><email>810768333@qq.com</email></author><category term="js" /><summary type="html">▪️ Javascript</summary></entry></feed>